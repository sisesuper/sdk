import{_ as l,r as o,o as c,c as i,a as n,b as s,d as e,w as t,e as p}from"./app.f18319b0.js";const u={},r=p(`<h1 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h1><p><code>SDK</code> 提供了自定义插件的方法，可以根据自己的需求定制插件。</p><h2 id="defineplugin" tabindex="-1"><a class="header-anchor" href="#defineplugin" aria-hidden="true">#</a> definePlugin</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">definePlugin</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token keyword">extends</span> Object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
   name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
   plugin<span class="token operator">:</span> PluginOptions<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> DefinedWebglPlugin<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),d=n("p",null,"参数",-1),k=n("li",null,[n("p",null,[n("code",null,"name:"),s(" 插件名称")])],-1),m=n("p",null,[n("code",null,"plugin:"),s(" 插件配置参数")],-1),v=n("p",null,"返回值",-1),g=n("p",null,[n("code",null,"DefinedWebglPlugin")],-1),h=p(`<h2 id="插件中自定义方法" tabindex="-1"><a class="header-anchor" href="#插件中自定义方法" aria-hidden="true">#</a> 插件中自定义方法</h2><p>在生命周期函数内的任何地方使用 <code>return {}</code> ，即可对外暴露函数</p><ul><li>示例</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">definePlugin</span><span class="token punctuation">(</span>
   <span class="token string">&quot;customPlugin&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件的名称,后续需要通过这个名称获取插件实例</span>
   <span class="token punctuation">{</span>
      <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 对外暴露函数helloWorld</span>
         <span class="token keyword">const</span> <span class="token function-variable function">helloWorld</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">helloWorld, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name <span class="token operator">|</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">return</span> <span class="token punctuation">{</span> helloWorld <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function b(f,_){const a=o("RouterLink");return c(),i("div",null,[r,n("ul",null,[n("li",null,[d,n("ul",null,[k,n("li",null,[m,n("ul",null,[n("li",null,[s("参考: "),e(a,{to:"/three/help/declare.html#pluginoptions"},{default:t(()=>[s("PluginOptions")]),_:1})])])])])]),n("li",null,[v,n("ul",null,[n("li",null,[g,n("ul",null,[n("li",null,[s("参考: "),e(a,{to:"/three/help/declare.html#definedwebglplugin"},{default:t(()=>[s("DefinedWebglPlugin")]),_:1})])])])])])]),h])}const P=l(u,[["render",b],["__file","defineplugin.html.vue"]]);export{P as default};
