import{_ as t,r as l,o as i,c as p,a as n,b as e,d as o,e as s}from"./app.f18319b0.js";const c={},r=s(`<h1 id="eventemitter" tabindex="-1"><a class="header-anchor" href="#eventemitter" aria-hidden="true">#</a> EventEmitter</h1><p><code>EventEmitter</code> 类似 <code>Node.js</code> 中的 <code>EventEmitter</code> 类，负责事件的 <strong>监听</strong> 与 <strong>触发</strong> 。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count( )</h3><p>获取指定类型的监听器数量</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><code>type:</code> 监听器类型，若为空，则获取所有监听器数量</li></ul></li><li><p>返回值</p><ul><li><code>count:</code> 对应类型的监听器数量</li></ul></li></ul><h3 id="once" tabindex="-1"><a class="header-anchor" href="#once" aria-hidden="true">#</a> once( )</h3><p>仅监听一次</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">once</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><p><code>event:</code> 监听器类型</p></li><li><p><code>listener:</code> 监听器回调</p></li></ul></li><li><p>返回值</p><ul><li><code>this:</code> EventEmitter 实例</li></ul></li></ul><h3 id="haseventlistener" tabindex="-1"><a class="header-anchor" href="#haseventlistener" aria-hidden="true">#</a> hasEventListener( )</h3><p>判定是否存在事件监听</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hasEventListener</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><p><code>event:</code> 监听器类型</p></li><li><p><code>listener:</code> 监听器回调</p></li></ul></li><li><p>返回值</p><ul><li><code>boolean:</code> 是否存在</li></ul></li></ul><h3 id="geteventlistener" tabindex="-1"><a class="header-anchor" href="#geteventlistener" aria-hidden="true">#</a> getEventListener( )</h3><p>获取指定事件类型的监听方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getEventListener</span><span class="token punctuation">(</span>event<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><code>event:</code> 事件类型，若为空，则获取所有事件的监听方法</li></ul></li><li><p>返回值</p><ul><li><code>function:</code> 监听器回调</li></ul></li></ul><h3 id="addeventlistener" tabindex="-1"><a class="header-anchor" href="#addeventlistener" aria-hidden="true">#</a> addEventListener( )</h3><p>添加事件监听器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><p><code>event:</code> 监听器类型</p></li><li><p><code>listener:</code> 监听器回调</p></li></ul></li><li><p>返回值</p><ul><li><code>this:</code> EventEmitter 实例</li></ul></li></ul><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> emit( )</h3><p>触发监听的事件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span>event<span class="token operator">:</span> DTEvent<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,26),d=n("p",null,"参数",-1),u=n("p",null,[n("code",null,"event:"),e(" 事件对象")],-1),k={href:"/three/help/declare.html#dtevent",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"返回值"),n("ul",null,[n("li",null,"无")])],-1),h=s(`<h3 id="removeeventlistener" tabindex="-1"><a class="header-anchor" href="#removeeventlistener" aria-hidden="true">#</a> removeEventListener( )</h3><p>移除监听器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><p><code>event:</code> 监听器类型</p></li><li><p><code>listener:</code> 监听器回调</p></li></ul></li><li><p>返回值</p><ul><li>无</li></ul></li></ul><h3 id="removealllistener" tabindex="-1"><a class="header-anchor" href="#removealllistener" aria-hidden="true">#</a> removeAllListener( )</h3><p>移除指定类型的全部监听器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeAllListener</span><span class="token punctuation">(</span>event<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><code>event:</code> 监听器类型，若为空，则移除所有类型的全部监听器</li></ul></li><li><p>返回值</p><ul><li>无</li></ul></li></ul>`,8);function m(b,g){const a=l("ExternalLinkIcon");return i(),p("div",null,[r,n("ul",null,[n("li",null,[d,n("ul",null,[n("li",null,[u,n("ul",null,[n("li",null,[e("参考: "),n("a",k,[e("DTEvent"),o(a)])])])])])]),v]),h])}const y=t(c,[["render",m],["__file","eventemitter.html.vue"]]);export{y as default};
