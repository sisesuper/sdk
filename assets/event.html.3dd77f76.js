import{_ as p,r as i,o as l,c as o,a as n,b as a,d as t,e as s}from"./app.f18319b0.js";const c={},d=s('<h1 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h1><h2 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h2><p>目前所支持的事件类型主要分两大类：交互事件（或鼠标事件）和用户自定义事件（模型的逻辑事件还在扩展中）。 根据触发的对象不同又分为：全局事件和模型事件。</p><h2 id="交互事件" tabindex="-1"><a class="header-anchor" href="#交互事件" aria-hidden="true">#</a> 交互事件</h2><p>交互事件事件为用户的鼠标事件和手势事件等的统称，当用户点击三维场景或者某个特定的模型时，就会触发一个交互事件。 该类事件可以用来完成一些列具有特定交互反馈的功能，例如：选中某一个模型，点击查看某模型详情等等。 在整个模型树上交互事件的触发顺序采用了事件冒泡机制。</p><h3 id="pointerdown" tabindex="-1"><a class="header-anchor" href="#pointerdown" aria-hidden="true">#</a> pointerdown</h3><p>按下时触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointerenter" tabindex="-1"><a class="header-anchor" href="#pointerenter" aria-hidden="true">#</a> pointerenter</h3><p>进入测试区域时触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointerleave" tabindex="-1"><a class="header-anchor" href="#pointerleave" aria-hidden="true">#</a> pointerleave</h3><p>离开测试区域时触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointermove" tabindex="-1"><a class="header-anchor" href="#pointermove" aria-hidden="true">#</a> pointermove</h3><p>移动过程中持续触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointerout" tabindex="-1"><a class="header-anchor" href="#pointerout" aria-hidden="true">#</a> pointerout</h3><p>离开测试区域时触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointerover" tabindex="-1"><a class="header-anchor" href="#pointerover" aria-hidden="true">#</a> pointerover</h3><p>移动过程中持续触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h3 id="pointerup" tabindex="-1"><a class="header-anchor" href="#pointerup" aria-hidden="true">#</a> pointerup</h3><p>松开时触发</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>model: BaseRender | undefined</code></li></ul></li><li>说明： <ul><li>event: 鼠标或手势事件</li><li>model: 事件触发的目标模型实例</li></ul></li></ul><h2 id="全局事件" tabindex="-1"><a class="header-anchor" href="#全局事件" aria-hidden="true">#</a> 全局事件</h2>',27),u={href:"/guide/event.html#%E4%BA%A4%E4%BA%92%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},r=s('<h3 id="painting" tabindex="-1"><a class="header-anchor" href="#painting" aria-hidden="true">#</a> painting</h3><p>场景首次渲染过程中持续触发</p><ul><li>参数： <ul><li><code>percent: number</code></li></ul></li><li>说明： <ul><li>percent: 当前渲染进度比例，全部完成时为100%</li></ul></li></ul><h2 id="模型事件" tabindex="-1"><a class="header-anchor" href="#模型事件" aria-hidden="true">#</a> 模型事件</h2>',4),k={href:"/guide/event.html#%E4%BA%A4%E4%BA%92%E4%BA%8B%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},h=s(`<h3 id="show" tabindex="-1"><a class="header-anchor" href="#show" aria-hidden="true">#</a> show</h3><p>模型由隐藏变为可见时触发</p><ul><li>参数： <ul><li><code>无</code></li></ul></li></ul><blockquote><p>该方法还在实现过程中，即将支持</p></blockquote><h3 id="hide" tabindex="-1"><a class="header-anchor" href="#hide" aria-hidden="true">#</a> hide</h3><p>模型由可见变为隐藏时触发</p><ul><li>参数： <ul><li><code>无</code></li></ul></li></ul><blockquote><p>该方法还在实现过程中，即将支持</p></blockquote><h3 id="dragging-changed" tabindex="-1"><a class="header-anchor" href="#dragging-changed" aria-hidden="true">#</a> dragging-changed</h3><p>模型被拖拽时持续触发</p><ul><li>参数： <ul><li><code>无</code></li></ul></li><li>说明： <ul><li>模型渲染完成可获取和操作场景中的所有对象</li></ul></li></ul><blockquote><p>该事件目前只在 TransformControls 实例有效</p></blockquote><h2 id="监听事件" tabindex="-1"><a class="header-anchor" href="#监听事件" aria-hidden="true">#</a> 监听事件</h2><p>事件监听目前支持两种方式：全局监听、模型监听</p><h3 id="全局监听" tabindex="-1"><a class="header-anchor" href="#全局监听" aria-hidden="true">#</a> 全局监听</h3><p>全局监听即借用 <code>helper</code> 辅助对象的事件监听方法，对场景的事件进行监听</p><ul><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>helper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

helper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;pointerdown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> model</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// event 即为点击事件</span>
    <span class="token comment">// model 为点击的模型实例或undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型监听" tabindex="-1"><a class="header-anchor" href="#模型监听" aria-hidden="true">#</a> 模型监听</h3><p>模型监听即为在模型扩展中直接添加响应的事件方法，即可完成对模型事件的监听</p><ul><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Scene<span class="token punctuation">,</span>
    <span class="token function">pointerdown</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> model</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>model <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;事件在当前模型上触发&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件触发" tabindex="-1"><a class="header-anchor" href="#事件触发" aria-hidden="true">#</a> 事件触发</h2><p>一般情况你不应该手动触发交互事件，交互事件由浏览器自动触发。但自定义事件可在某些特定场景下自主触发。 通过 <code>helper.dispatchEvent</code> 和 <code>this.dispatchEvent</code> 可触发一个自定义事件。</p><ul><li>示例： 通过 <code>this.dispatchEvent</code> 触发事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> helper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Scene<span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">&#39;scene-created&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听事件</span>
helper<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scene-created&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>helper.dispatchEvent</code> 触发事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> helper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Scene<span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;force-scene-update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 触发事件</span>
helper<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token string">&#39;force-scene-update&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function v(m,b){const e=i("ExternalLinkIcon");return l(),o("div",null,[d,n("p",null,[a("全局中也支持用户的"),n("a",u,[a("交互事件"),t(e)])]),r,n("p",null,[a("模型的交互事件请参考 "),n("a",k,[a("交互事件"),t(e)])]),h])}const g=p(c,[["render",v],["__file","event.html.vue"]]);export{g as default};
