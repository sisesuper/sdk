import{_ as c,r as o,o as i,c as l,a as n,b as s,d as a,w as u,e as t}from"./app.f18319b0.js";const r={},d=n("h1",{id:"网络",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络","aria-hidden":"true"},"#"),s(" 网络")],-1),k=n("h3",{id:"配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),s(" 配置")],-1),v=n("code",null,"connect",-1),m=n("code",null,"request",-1),h={href:"https://www.axios-http.cn/",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>tacos<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    appCode<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    request<span class="token operator">:</span> <span class="token punctuation">{</span>
      baseURL<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
      interceptor<span class="token operator">:</span> <span class="token punctuation">{</span>
        request<span class="token operator">:</span> <span class="token punctuation">{</span> handle<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">,</span>
        response<span class="token operator">:</span> <span class="token punctuation">{</span> handle<span class="token punctuation">,</span> error <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>baseURL</code>: 根路径 <code>url</code></p></li><li><p><code>interceptor</code>：拦截器</p></li></ul>`,2),_={href:"https://www.axios-http.cn/docs/req_config",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="拦截" tabindex="-1"><a class="header-anchor" href="#拦截" aria-hidden="true">#</a> 拦截</h3><p>网络拦截支持 <em><strong>全局拦截</strong></em> 和 <em><strong>局部拦截</strong></em></p><h4 id="全局拦截" tabindex="-1"><a class="header-anchor" href="#全局拦截" aria-hidden="true">#</a> 全局拦截</h4><p>通过 <code>connect</code> 初始化连接时，通过 <code>core</code> 对象注册全局拦截函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>tacos<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>core <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前上下文Context对象的ajax请求拦截器对象</span>
    <span class="token keyword">const</span> interceptor <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">interceptor</span><span class="token punctuation">(</span><span class="token string">&quot;ajax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注入请求拦截回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注入响应拦截回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),g=t(`<h4 id="局部拦截" tabindex="-1"><a class="header-anchor" href="#局部拦截" aria-hidden="true">#</a> 局部拦截</h4><p>在 <code>SDK</code> 模块内注册网络请求拦截函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineSDK</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 获取当前模块对象的ajax请求拦截器</span>
      <span class="token keyword">const</span> interceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interceptor</span><span class="token punctuation">(</span><span class="token string">&quot;ajax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 注入请求拦截回调函数</span>
      interceptor<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 注入响应拦截回调函数</span>
      interceptor<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">...</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function x(q,w){const e=o("ExternalLinkIcon"),p=o("RouterLink");return i(),l("div",null,[d,k,n("p",null,[s("通过 "),v,s(" 方法配置 "),m,s(" 请求初始配置，其内部底层网络请求采用"),n("a",h,[s("axios"),a(e)]),s("库实现；")]),b,n("blockquote",null,[n("p",null,[s("requestConfig: 更多配置参考"),n("a",_,[s("请求配置 | Axios 中文文档 | Axios 中文网"),a(e)])])]),f,n("blockquote",null,[n("p",null,[s("更多参数细节："),a(p,{to:"/digital/help/declare.html#RequestConfig"},{default:u(()=>[s("RequestConfig")]),_:1})])]),g])}const C=c(r,[["render",x],["__file","http.html.vue"]]);export{C as default};
