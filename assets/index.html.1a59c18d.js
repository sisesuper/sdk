import{_ as t,r as l,o as i,c,a as e,b as n,d as s,e as o}from"./app.f18319b0.js";const d={},r=o(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h1><h2 id="静态api" tabindex="-1"><a class="header-anchor" href="#静态api" aria-hidden="true">#</a> 静态API</h2><h3 id="sdk-renderer" tabindex="-1"><a class="header-anchor" href="#sdk-renderer" aria-hidden="true">#</a> SDK.renderer</h3><p>通过 <code>SDK.renderer</code> 可重置或自定义渲染器。</p><ul><li>参数： <ul><li><code>type: string</code></li><li><code>render: DTRender.BaseRenderConstructor</code></li></ul></li><li>返回值：<code>undefined</code></li><li>用法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> BaseRender <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PerspectiveCamera <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;three&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">SelfCamera</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRender</span><span class="token punctuation">{</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PerspectiveCamera</span><span class="token punctuation">(</span> <span class="token number">45</span><span class="token punctuation">,</span> width <span class="token operator">/</span> height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 把自定义的渲染器添加到SDK中</span>
<span class="token constant">SDK</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;self-camera&quot;</span><span class="token punctuation">,</span> SelfCamera<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),p={href:"/guide/render.html",target:"_blank",rel:"noopener noreferrer"},u=o(`<h3 id="sdk-component" tabindex="-1"><a class="header-anchor" href="#sdk-component" aria-hidden="true">#</a> SDK.component</h3><p>通过 <code>SDK.component</code> 可增强三维模型渲染的能力。</p><ul><li>参数： <ul><li><code>component: ReturnType&lt;DTRender.createComponent&gt;</code></li></ul></li><li>返回值：<code>undefined</code></li><li>用法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> createComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token constant">SDK</span><span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;self-camera&quot;</span><span class="token punctuation">,</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;self-camera&#39;</span><span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// after this hook, you can use: this.$model</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// TODO: do something when render</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"/guide/hmodel.html",target:"_blank",rel:"noopener noreferrer"},k=o(`<h3 id="sdk-parser" tabindex="-1"><a class="header-anchor" href="#sdk-parser" aria-hidden="true">#</a> SDK.parser</h3><p>通过 <code>SDK.parser</code> 可自定义参数解析逻辑。</p><ul><li>参数： <ul><li><code>optionParser: Function</code></li></ul></li><li>返回值：<code>undefined</code></li></ul><h2 id="上下文" tabindex="-1"><a class="header-anchor" href="#上下文" aria-hidden="true">#</a> 上下文</h2><h3 id="el" tabindex="-1"><a class="header-anchor" href="#el" aria-hidden="true">#</a> el</h3><ul><li>类型：<code>HTMLElement</code></li><li>说明：渲染三维的目标DOM</li></ul><h3 id="version-string" tabindex="-1"><a class="header-anchor" href="#version-string" aria-hidden="true">#</a> version: string</h3><ul><li>类型：<code>string</code></li><li>说明：版本号</li></ul><h3 id="engine" tabindex="-1"><a class="header-anchor" href="#engine" aria-hidden="true">#</a> engine</h3><ul><li>类型：<code>threejs | cesium</code></li><li>说明：当前的渲染引擎</li></ul><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h3><ul><li>类型：<code>development | production</code></li><li>说明：渲染模式</li></ul><h3 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> os</h3><ul><li>类型：<code>string</code></li><li>说明：当前系统</li></ul><h3 id="focusuid" tabindex="-1"><a class="header-anchor" href="#focusuid" aria-hidden="true">#</a> focusUid</h3><ul><li>类型：<code>DTModel.UID</code></li><li>说明：当前聚焦的模型ID</li></ul><h3 id="rerender" tabindex="-1"><a class="header-anchor" href="#rerender" aria-hidden="true">#</a> rerender</h3><ul><li>类型：<code>boolean</code></li><li>说明：是否需要重绘</li></ul><h3 id="autorender" tabindex="-1"><a class="header-anchor" href="#autorender" aria-hidden="true">#</a> autoRender</h3><ul><li>类型：<code>boolean</code></li><li>说明：是否一直自动重绘</li></ul><h3 id="pixelratio" tabindex="-1"><a class="header-anchor" href="#pixelratio" aria-hidden="true">#</a> pixelRatio</h3><ul><li>类型：<code>number</code></li><li>说明：分辨率</li></ul><h3 id="shadow" tabindex="-1"><a class="header-anchor" href="#shadow" aria-hidden="true">#</a> shadow</h3><ul><li>类型：<code>boolean</code></li><li>说明：是否支持阴影</li></ul><h3 id="disable" tabindex="-1"><a class="header-anchor" href="#disable" aria-hidden="true">#</a> disable</h3><ul><li>类型：<code>boolean</code></li><li>说明：当前场景是否可操控</li></ul><h3 id="isrendering" tabindex="-1"><a class="header-anchor" href="#isrendering" aria-hidden="true">#</a> isRendering</h3><ul><li>类型：<code>boolean</code></li><li>说明：是否正在重绘</li></ul><h2 id="全局api" tabindex="-1"><a class="header-anchor" href="#全局api" aria-hidden="true">#</a> 全局API</h2><h3 id="createcomponent" tabindex="-1"><a class="header-anchor" href="#createcomponent" aria-hidden="true">#</a> createComponent</h3><p>创建模型扩展，在创建模型扩展时必须指定扩展模型的类型。除了指定需扩展的模型类型外，还可以通过<code>serial</code>指定某个具体的模型实例进行扩展。</p><ul><li>参数： <ul><li><code>options: DTRender.Component</code></li></ul></li><li>返回值：<code>DTRender.Component</code></li><li>用法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModule<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModule<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>GltfLoader<span class="token punctuation">,</span>
    <span class="token literal-property property">serial</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">xxxxx</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 设备序列号</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rerender-1" tabindex="-1"><a class="header-anchor" href="#rerender-1" aria-hidden="true">#</a> rerender</h3><p>通过传入新的场景配置，重新渲染整个三维场景，在该过程中会自动通过diff算法进行最小化的重绘</p><ul><li>参数: <ul><li><code>options: DTRender.DTOptions</code></li></ul></li><li>返回值: <code>undefined</code></li><li>用法:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">let</span> sdk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDK</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 需要重绘场景时</span>
sdk<span class="token punctuation">.</span><span class="token function">rerender</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mount" tabindex="-1"><a class="header-anchor" href="#mount" aria-hidden="true">#</a> $mount</h3><p>对三维模型添加事件，并把三维模型挂载至指定的容器中。</p><ul><li>参数: <ul><li><code>无</code></li></ul></li><li>返回值: <code>当前的实例</code></li><li>用法:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">let</span> sdk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDK</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> destroy</h3><p>销毁当前的三维场景。</p><ul><li>参数: <ul><li><code>无</code></li></ul></li><li>返回值: <code>undefined</code></li><li>用法:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">let</span> sdk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDK</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 销毁</span>
sdk<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),m={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},b=o(`<h2 id="实例-公共属性" tabindex="-1"><a class="header-anchor" href="#实例-公共属性" aria-hidden="true">#</a> 实例/公共属性</h2><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> $model</h3><ul><li>类型：<code>T</code></li><li>限制:<br> 具体的数据类型由初始化时传入的模型类型确定</li><li>详细:<br><code>$model</code>直接对应ThreeJS中的实例对象，它根据实例化过程中指定的模型类型动态确定，例如：threejs中的相机、控制器、渲染器等等。 通过该对象你拥有更强大的操作三维模型的能力。</li><li>示例:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>PerspectiveCamera<span class="token punctuation">,</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 当前的$model为three的PerspectiveCamera对象</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$model<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> $options</h3><ul><li>类型：<code>U</code></li><li>详细：<br><code>$options</code> 保存着原始的来自配置文件的所有属性，不同类型的模型实例对应的属性值略有差异。 <code>$options</code> 被设计为响应式的，修改该对象上个的任何属性值， 都将自动触发模型的重新渲染。<code>$options</code> 上拥有两个比较重要的内部属性对象：<code>props</code> 和 <code>userData</code>。 <ul><li>props: props直接对应three.js模型的属性值，不同类型的模型所对应的 props 可直接在three.js官方文档查找。</li><li>userData: userData设计为用于逻辑自定义的属性扩展，该属性值将会直接挂载到three.js Object3D对象的userData属性上， 它不应当包含对函数的引用，因为这些函数将不会被克隆。</li></ul></li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>PerspectiveCamera<span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>props<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options
    <span class="token keyword">this</span><span class="token punctuation">.</span>$model<span class="token punctuation">.</span>fov <span class="token operator">=</span> props<span class="token punctuation">.</span>fov
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),v={href:"/config/#%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},f=o(`<h3 id="scene" tabindex="-1"><a class="header-anchor" href="#scene" aria-hidden="true">#</a> $scene</h3><ul><li>类型：<code>BaseSceneRender</code></li><li>限制：<br><code>$scene</code> 即为当前三维场景的实例对象引用，该属性值在 <code>created</code> 生命周期才被初始化，请注意使用的位置。</li><li>详细：<br> 通过 <code>$scene</code> 对象可直接对三维场景进行操作，并且可以从 <code>$scene</code> 中获取整个三维场景的模型树，并根据条件动态删除或者添加其它模型。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>PerspectiveCamera<span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在created开始可使用 this.$scene</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$scene<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g={href:"/config/#scene",target:"_blank",rel:"noopener noreferrer"},_={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},y=o(`<h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> $context</h3><ul><li>类型：<code>DTRender.ContextOptions</code></li><li>限制：<br><code>$context</code> 对象可在模型实例化过程中的所有生命周期中使用</li><li>详细：<br><code>$context</code> 为渲染当前三维场景的上下文，<code>$context</code> 被设计为响应式，在实例化过程中会记录当前模型使用过的所有属性名称，当<code>$context</code>中的值在任何地方被修改后， 会自动触发当改模型的重新渲染流程。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>PerspectiveCamera<span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.$context 在任何地方均可被使用</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$context<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),x={href:"/config/#context",target:"_blank",rel:"noopener noreferrer"},E={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},D=o(`<h3 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> $parent</h3><ul><li>类型：<code>BaseRender</code></li><li>限制：<br> 不是所有的模型对象都拥有该属性值;<code>$parent</code> 不是在所有生命周期中均可使用，它只在<code>mounted</code>生命周期及其以后有值。</li><li>详细：<br><code>BaseControlRender</code>、<code>BaseSceneRender</code>、<code>BaseWebglRender</code>、<code>BaseCameraRender</code> 四类实例化对象没有 <code>$parent</code> 值。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>PerspectiveCamera<span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// this.$parent 还未被赋值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.$parent 已经被赋值</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},C=o(`<h3 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> $children</h3><ul><li>类型：<code>Array&lt;BaseRender&gt;</code></li><li>限制：<br> 不是所有模型对象的<code>$children</code>有值; <code>$children</code> 可在 <code>created</code> 生命周期中开始被使用。</li><li>详细：<br><code>BaseControlRender</code>、<code>BaseWebglRender</code>、<code>BaseCameraRender</code>等类型实例化对象没有子节点。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Scene<span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// this.$children</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="status" tabindex="-1"><a class="header-anchor" href="#status" aria-hidden="true">#</a> $status</h3><ul><li>类型：<code>boolean</code></li><li>限制：<br><code>$status</code> 为以下值之一：<code>beforeCreate</code>、<code>create</code>、<code>created</code>、<code>mounted</code>、<code>beforeRender</code>、<code>render</code>、<code>afterRender</code>、 <code>beforeDestroy</code>、<code>destroyed</code>。</li><li>详细：<br> 当前模型所处的生命周期值。</li></ul><h3 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> $uuid</h3><ul><li>类型：<code>DTModule.UID</code></li><li>限制：<br> 只读</li><li>详细：<br><code>$uuid</code> 为模型实例的唯一标识，该值不应该被修改。</li></ul><h2 id="实例-公共方法" tabindex="-1"><a class="header-anchor" href="#实例-公共方法" aria-hidden="true">#</a> 实例/公共方法</h2><h3 id="invokeevent" tabindex="-1"><a class="header-anchor" href="#invokeevent" aria-hidden="true">#</a> invokeEvent</h3><p>触发模型的事件。</p><ul><li>参数： <ul><li><code>event: Event</code></li><li><code>target: BaseRender</code></li></ul></li><li>返回值: <code>boolean</code></li><li>用法:<br> 通过 <code>invokeEvent</code> 可从树的页子节点逐一触发事件至根节点，在事件冒泡过程中的任意节点返回值为 <code>true</code> ，会即刻阻止继续事件的冒泡行为。 该方法会在用户触发某个鼠标事件后自动触发，不应该被手动触发，除非你明确知道整个执行流程。</li></ul><h3 id="forceupdate" tabindex="-1"><a class="header-anchor" href="#forceupdate" aria-hidden="true">#</a> forceUpdate</h3><p>重绘当前模型。</p><ul><li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br> 调用 <code>this.forceUpdate</code> 方法，可以在下一次 <code>window.requestAnimationFrame</code> 时执行当前模型的 <code>render</code> 方法。</li></ul><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove</h3><p>删除当前模型。</p>`,16),A=o("<li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br> 通过 <code>remove</code> 方法将会把当前模型从场景中移除，如果当前模型存在parent,也会从parent中删除对当前模型的引用。如果当前模型存在子模型， 调用 <code>remove</code> 时会按照深度优先顺序依次触发子模型的<code>remove</code>方法。在删除模型的过程中会依次触发 <code>beforeDestroy</code> 和 <code>destroyed</code>生命周期。</li>",3),T={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},B=e("h3",{id:"add",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#add","aria-hidden":"true"},"#"),n(" add")],-1),$=e("p",null,"添加模型。",-1),j=o("<li>参数： <ul><li><code>options: DTRender.ModelOptions | Array&lt;DTRender.ModelOptions&gt;</code></li></ul></li><li>返回值: <code>BaseRender | Array&lt;BaseRender&gt;</code></li><li>用法:<br> 动态给当前模型添加内部子模型，<code>add</code> 方法支持添加一个或多个子模型，返回值也是对应一个或多个动态添加的子模型实例。通过该方法添加的子模型也支持通过<code>helper.exportOptions</code> API导出配置项。</li>",3),R={href:"/api/#exportoptions",target:"_blank",rel:"noopener noreferrer"},F=o('<h3 id="requestanimationframe" tabindex="-1"><a class="header-anchor" href="#requestanimationframe" aria-hidden="true">#</a> requestAnimationFrame</h3><p>同 window.requestAnimationFrame。</p><ul><li>参数： <ul><li><code>callback: Function</code></li></ul></li><li>返回值: <code>number</code></li><li>用法:<br><code>requestAnimationFrame</code> 只是对 <code>window.requestAnimationFrame</code> 的简单扩展，在模型扩展和渲染器扩展的逻辑实现中，应该用 <code>this.requestAnimationFrame</code> 代替直接使用 <code>window.requestAnimationFrame</code> 方法。在 <code>this.requestAnimationFrame</code> 的扩展中主要增加了对当前模型状态的检测， 如果当前模型的 <code>$status</code> 状态已经处于 <code>destroyed</code> 时，将不再继续执行后续逻辑。</li></ul><h2 id="选项-生命周期" tabindex="-1"><a class="header-anchor" href="#选项-生命周期" aria-hidden="true">#</a> 选项/生命周期</h2><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3>',5),M=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"options: DTRender.Options")])])],-1),S=e("li",null,[n("返回值: "),e("code",null,"DTRender.Options")],-1),P=e("li",null,[n("用法: 通过 "),e("code",null,"data"),n(" 方法可以对模型的 "),e("code",null,"options"),n(" 配置项进行扩展，并依然拥有数据响应式的特征。")],-1),O={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},K=e("h3",{id:"beforecreate",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#beforecreate","aria-hidden":"true"},"#"),n(" beforeCreate")],-1),L=e("li",null,[n("参数: "),e("code",null,"options: DTRender.Options")],-1),q=e("li",null,[n("返回值: "),e("code",null,"无")],-1),I=e("li",null,[n("用法:"),e("br"),e("code",null,"beforeCreate"),n(" 生命周期在模型实例创建前调用，在该生命周期中可以对模型对象进行扩展，添加自定义方法等。当前生命周期中的参数"),e("code",null,"options"),n("还不具备响应式，且模型实例还未被创建。")],-1),G={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},U=e("h3",{id:"created",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#created","aria-hidden":"true"},"#"),n(" created")],-1),V=o("<li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br><code>created</code> 生命周期在模型实例创建后调用，在当前及其以后的生命周期中可直接通过<code>this.$model</code>访问到底层模型对象， 且当前及其以后的生命周期中可直接使用<code>this.$options</code>访问模型的配置信息，当修改了<code>this.$options</code>中的模型值时会自动触发当前模型的重绘流程。</li>",3),H={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},N=e("h3",{id:"beforerender",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#beforerender","aria-hidden":"true"},"#"),n(" beforeRender")],-1),W=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"无")])])],-1),J=e("li",null,[n("返回值: "),e("code",null,"无")],-1),X=e("li",null,[n("用法:"),e("br"),n(" 在模型即将执行render方法时触发。")],-1),Y={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},z=e("h3",{id:"render",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#render","aria-hidden":"true"},"#"),n(" render")],-1),Q=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"无")])])],-1),Z=e("li",null,[n("返回值: "),e("code",null,"无")],-1),ee=e("li",null,[n("用法:"),e("br"),n(" 每次模型重绘都将自动触发该生命周期。")],-1),ne={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},ae=e("h3",{id:"afterrender",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#afterrender","aria-hidden":"true"},"#"),n(" afterRender")],-1),se=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"无")])])],-1),oe=e("li",null,[n("返回值: "),e("code",null,"无")],-1),te=e("li",null,[n("用法:"),e("br"),n(" 在模型完成render重绘后执行当前生命周期。")],-1),le={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},ie=e("h3",{id:"beforedestroy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#beforedestroy","aria-hidden":"true"},"#"),n(" beforeDestroy")],-1),ce=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"无")])])],-1),de=e("li",null,[n("返回值: "),e("code",null,"无")],-1),re=e("li",null,[n("用法:"),e("br"),n(" 在模型即将被销毁时自动触发当前生命周期。")],-1),pe={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},ue=e("h3",{id:"destroyed",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#destroyed","aria-hidden":"true"},"#"),n(" destroyed")],-1),he=e("li",null,[n("参数： "),e("ul",null,[e("li",null,[e("code",null,"无")])])],-1),ke=e("li",null,[n("返回值: "),e("code",null,"无")],-1),me=e("li",null,[n("用法:"),e("br"),n(" 模型已经被删除后触发当前生命周期。")],-1),be={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},ve=o(`<h2 id="helper" tabindex="-1"><a class="header-anchor" href="#helper" aria-hidden="true">#</a> helper</h2><p>helper为迁全局实例对象，该实例对象提供了一系列有用的上层API。</p><h3 id="getcontrolbytype" tabindex="-1"><a class="header-anchor" href="#getcontrolbytype" aria-hidden="true">#</a> getControlByType</h3><ul><li>参数： <ul><li><code>type: DTModule.Type.OrbitControls | DTModule.Type.TransformControls</code></li></ul></li><li>返回值: <code>BaseControlRender</code></li><li>用法:<br> 通过该方法可获取当前场景中的控制器，参数<code>type</code>为控制器的类型，目前支持所列两种控制器，后续可按需添加或可自行扩展。</li></ul><h3 id="getcamera" tabindex="-1"><a class="header-anchor" href="#getcamera" aria-hidden="true">#</a> getCamera</h3><ul><li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br> 通过该方法可获取场景中的相机模型对象</li></ul><h3 id="getcontrols" tabindex="-1"><a class="header-anchor" href="#getcontrols" aria-hidden="true">#</a> getControls</h3><ul><li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br> 返回场景中所有控制器列表集合</li></ul><h3 id="getscene" tabindex="-1"><a class="header-anchor" href="#getscene" aria-hidden="true">#</a> getScene</h3><ul><li>参数： <ul><li><code>无</code></li></ul></li><li>返回值: <code>无</code></li><li>用法:<br> 返回当前场景的scene对象</li></ul><h3 id="getmodelbytype" tabindex="-1"><a class="header-anchor" href="#getmodelbytype" aria-hidden="true">#</a> getModelByType</h3><ul><li>参数： <ul><li><code>type: DTModule.Type</code></li></ul></li><li>返回值: <code>Array&lt;BaseRender&gt;</code></li><li>用法:<br> 根据模型类型获取当前三维场景中与之对应的所有模型实例列表。</li></ul><h3 id="getmodelbyuid" tabindex="-1"><a class="header-anchor" href="#getmodelbyuid" aria-hidden="true">#</a> getModelByUid</h3><ul><li>参数： <ul><li><code>uuid: DTModel.UID</code></li></ul></li><li>返回值: <code>BaseRender</code></li><li>用法:<br> 根据模型的实例id，获取场景中与之对应的模型。</li></ul><h3 id="get3dpointfrom2dpoint" tabindex="-1"><a class="header-anchor" href="#get3dpointfrom2dpoint" aria-hidden="true">#</a> get3DPointFrom2DPoint</h3><ul><li>参数： <ul><li><code>clientX: number</code></li><li><code>clientY: number</code></li></ul></li><li>返回值: <code>Vector2</code></li><li>用法:<br> 把二维坐标点转换为当前三维场景的坐标点。</li></ul><h3 id="raymodelfrom2dpoint" tabindex="-1"><a class="header-anchor" href="#raymodelfrom2dpoint" aria-hidden="true">#</a> rayModelFrom2DPoint</h3><ul><li>参数： <ul><li><code>coords: Vector2</code></li><li><code>onlyModel: boolean = true</code></li></ul></li><li>返回值: <code>BaseRender</code></li><li>用法:<br> 根据2D的坐标点采用与相机位置的射线投射方式选择场景中的物体。</li></ul><h3 id="raypointfromcamera" tabindex="-1"><a class="header-anchor" href="#raypointfromcamera" aria-hidden="true">#</a> rayPointFromCamera</h3><ul><li>参数： <ul><li><code>coords: Vector2</code></li><li><code>plane?: Plane</code></li></ul></li><li>返回值: <code>Vector3</code></li><li>用法:<br> 根据2D的坐标点与对应的平面（平面参数非必须，默认为世界地图中：y =0 的地平面），采用与相机位置的射线方式获取与平面的相交点。</li></ul><h3 id="exportoptions" tabindex="-1"><a class="header-anchor" href="#exportoptions" aria-hidden="true">#</a> exportOptions</h3><ul><li>参数：<code>无</code></li><li>返回值: <code>DTParser.Options</code></li><li>用法:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>helper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">let</span> options <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">exportOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),fe={href:"/config/",target:"_blank",rel:"noopener noreferrer"},ge=o('<h2 id="dtmodule-hooktype" tabindex="-1"><a class="header-anchor" href="#dtmodule-hooktype" aria-hidden="true">#</a> DTModule.HookType</h2><h3 id="beforecreate-1" tabindex="-1"><a class="header-anchor" href="#beforecreate-1" aria-hidden="true">#</a> beforeCreate</h3><ul><li>类型: <code>string</code></li><li>值：<code>beforeCreate</code></li></ul><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h3><ul><li>类型: <code>string</code></li><li>值：<code>create</code></li></ul><h3 id="created-1" tabindex="-1"><a class="header-anchor" href="#created-1" aria-hidden="true">#</a> created</h3><ul><li>类型: <code>string</code></li><li>值：<code>created</code></li></ul><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted" aria-hidden="true">#</a> mounted</h3><ul><li>类型: <code>string</code></li><li>值：<code>mounted</code></li></ul><h3 id="beforerender-1" tabindex="-1"><a class="header-anchor" href="#beforerender-1" aria-hidden="true">#</a> beforeRender</h3><ul><li>类型: <code>string</code></li><li>值：<code>beforeRender</code></li></ul><h3 id="render-1" tabindex="-1"><a class="header-anchor" href="#render-1" aria-hidden="true">#</a> render</h3><ul><li>类型: <code>string</code></li><li>值：<code>render</code></li></ul><h3 id="afterrender-1" tabindex="-1"><a class="header-anchor" href="#afterrender-1" aria-hidden="true">#</a> afterRender</h3><ul><li>类型: <code>string</code></li><li>值：<code>afterRender</code></li></ul><h3 id="beforedestroy-1" tabindex="-1"><a class="header-anchor" href="#beforedestroy-1" aria-hidden="true">#</a> beforeDestroy</h3><ul><li>类型: <code>string</code></li><li>值：<code>beforeDestroy</code></li></ul><h3 id="destroyed-1" tabindex="-1"><a class="header-anchor" href="#destroyed-1" aria-hidden="true">#</a> destroyed</h3><ul><li>类型: <code>string</code></li><li>值：<code>destroyed</code></li></ul><h2 id="dtmodule-type" tabindex="-1"><a class="header-anchor" href="#dtmodule-type" aria-hidden="true">#</a> DTModule.Type</h2><h3 id="perspectivecamera" tabindex="-1"><a class="header-anchor" href="#perspectivecamera" aria-hidden="true">#</a> PerspectiveCamera</h3><ul><li>类型：<code>string</code></li><li>值：<code>PerspectiveCamera</code></li></ul><h3 id="webglrender" tabindex="-1"><a class="header-anchor" href="#webglrender" aria-hidden="true">#</a> WebGLRender</h3><ul><li>类型：<code>string</code></li><li>值：<code>WebGLRender</code></li></ul><h3 id="hemispherelight" tabindex="-1"><a class="header-anchor" href="#hemispherelight" aria-hidden="true">#</a> HemisphereLight</h3><ul><li>类型：<code>string</code></li><li>值：<code>HemisphereLight</code></li></ul><h3 id="ambientlight" tabindex="-1"><a class="header-anchor" href="#ambientlight" aria-hidden="true">#</a> AmbientLight</h3><ul><li>类型：<code>string</code></li><li>值：<code>AmbientLight</code></li></ul><h3 id="directionallight" tabindex="-1"><a class="header-anchor" href="#directionallight" aria-hidden="true">#</a> DirectionalLight</h3><ul><li>类型：<code>string</code></li><li>值：<code>DirectionalLight</code></li></ul><h3 id="orbitcontrols" tabindex="-1"><a class="header-anchor" href="#orbitcontrols" aria-hidden="true">#</a> OrbitControls</h3><ul><li>类型：<code>string</code></li><li>值：<code>OrbitControls</code></li></ul><h3 id="transformcontrols" tabindex="-1"><a class="header-anchor" href="#transformcontrols" aria-hidden="true">#</a> TransformControls</h3><ul><li>类型：<code>string</code></li><li>值：<code>TransformControls</code></li></ul><h3 id="gridhelper" tabindex="-1"><a class="header-anchor" href="#gridhelper" aria-hidden="true">#</a> GridHelper</h3><ul><li>类型：<code>string</code></li><li>值：<code>GridHelper</code></li></ul><h3 id="scene-1" tabindex="-1"><a class="header-anchor" href="#scene-1" aria-hidden="true">#</a> Scene</h3><ul><li>类型：<code>string</code></li><li>值：<code>Scene</code></li></ul><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group" aria-hidden="true">#</a> Group</h3><ul><li>类型：<code>string</code></li><li>值：<code>Group</code></li></ul><h3 id="mesh" tabindex="-1"><a class="header-anchor" href="#mesh" aria-hidden="true">#</a> Mesh</h3><ul><li>类型：<code>string</code></li><li>值：<code>Mesh</code></li></ul><h3 id="gltfloader" tabindex="-1"><a class="header-anchor" href="#gltfloader" aria-hidden="true">#</a> GltfLoader</h3><ul><li>类型：<code>string</code></li><li>值：<code>GltfLoader</code></li></ul><h3 id="fbxloader" tabindex="-1"><a class="header-anchor" href="#fbxloader" aria-hidden="true">#</a> FbxLoader</h3><ul><li>类型：<code>string</code></li><li>值：<code>FbxLoader</code></li></ul><h2 id="dtmodule-uid" tabindex="-1"><a class="header-anchor" href="#dtmodule-uid" aria-hidden="true">#</a> DTModule.UID</h2><ul><li>类型：<code>string</code></li></ul><h2 id="dtmodule-serial" tabindex="-1"><a class="header-anchor" href="#dtmodule-serial" aria-hidden="true">#</a> DTModule.Serial</h2><ul><li>类型：<code>string</code></li></ul>',50);function _e(ye,xe){const a=l("ExternalLinkIcon");return i(),c("div",null,[r,e("ul",null,[e("li",null,[n("参考："),e("a",p,[n("扩展渲染器"),s(a)])])]),u,e("ul",null,[e("li",null,[n("参考："),e("a",h,[n("扩展模型"),s(a)])])]),k,e("ul",null,[e("li",null,[n("参考: "),e("a",m,[n("生命周期"),s(a)])])]),b,e("ul",null,[e("li",null,[n("参考："),e("a",v,[n("模型配置"),s(a)])])]),f,e("ul",null,[e("li",null,[n("参考："),e("a",g,[n("scene"),s(a)]),n(" 、 "),e("a",_,[n("生命周期"),s(a)])])]),y,e("ul",null,[e("li",null,[n("参考："),e("a",x,[n("scene"),s(a)]),n(" 、 "),e("a",E,[n("生命周期"),s(a)])])]),D,e("ul",null,[e("li",null,[n("参考： "),e("a",w,[n("生命周期"),s(a)])])]),C,e("ul",null,[A,e("li",null,[n("参考："),e("a",T,[n("生命周期"),s(a)])])]),B,$,e("ul",null,[j,e("li",null,[n("参考: "),e("a",R,[n("exportOptions"),s(a)])])]),F,e("ul",null,[M,S,P,e("li",null,[n("参考: "),e("a",O,[n("生命周期"),s(a)])])]),K,e("ul",null,[L,q,I,e("li",null,[n("参考: "),e("a",G,[n("生命周期"),s(a)])])]),U,e("ul",null,[V,e("li",null,[n("参考: "),e("a",H,[n("生命周期"),s(a)])])]),N,e("ul",null,[W,J,X,e("li",null,[n("参考: "),e("a",Y,[n("生命周期"),s(a)])])]),z,e("ul",null,[Q,Z,ee,e("li",null,[n("参考: "),e("a",ne,[n("生命周期"),s(a)])])]),ae,e("ul",null,[se,oe,te,e("li",null,[n("参考: "),e("a",le,[n("生命周期"),s(a)])])]),ie,e("ul",null,[ce,de,re,e("li",null,[n("参考: "),e("a",pe,[n("生命周期"),s(a)])])]),ue,e("ul",null,[he,ke,me,e("li",null,[n("参考: "),e("a",be,[n("生命周期"),s(a)])])]),ve,e("ul",null,[e("li",null,[n("参考: "),e("a",fe,[n("配置"),s(a)])])]),ge])}const De=t(d,[["render",_e],["__file","index.html.vue"]]);export{De as default};
