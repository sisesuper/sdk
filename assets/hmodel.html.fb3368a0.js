import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app.f18319b0.js";const l={},u=e(`<h1 id="模型操作" tabindex="-1"><a class="header-anchor" href="#模型操作" aria-hidden="true">#</a> 模型操作</h1><p>模型是三维场景中核心也是最基础的组成部分，很多时候对三维场景的操作也就是对模型的操作，掌握了对模型的操作后， 使用相同的方式也可以完成对灯光、控制器、场景等的操作。</p><h2 id="获取模型" tabindex="-1"><a class="header-anchor" href="#获取模型" aria-hidden="true">#</a> 获取模型</h2><p>在对一个场景中的三维模型进行操作前，我们需要先获取这个模型实例对象，在 <code>dt-sdk</code> 中可以通过扩展模型的方式获取模型实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...模型扩展</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),r={href:"/api/#createcomponent",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"生命周期扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#生命周期扩展","aria-hidden":"true"},"#"),s(" 生命周期扩展")],-1),k={href:"/guide/model.html#%E6%A8%A1%E5%9E%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>OrbitControls<span class="token punctuation">,</span>
    <span class="token comment">// created 方法 在 OrbitControls 被创建后调用</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$model<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 监听模型改变方法</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义方法" tabindex="-1"><a class="header-anchor" href="#自定义方法" aria-hidden="true">#</a> 自定义方法</h2><p>模块扩展除了支持添加生命周期外，还可添加自定义方法和属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>createComponent<span class="token punctuation">,</span> DTModel<span class="token punctuation">,</span> helper<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>OrbitControls<span class="token punctuation">,</span>
    <span class="token comment">// created 方法 在 OrbitControls 被创建后调用</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$model<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 监听模型改变方法</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$status <span class="token operator">===</span> HookType<span class="token punctuation">.</span>destroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token punctuation">{</span> target <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">,</span>
            <span class="token punctuation">{</span> position <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
            camera <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        camera<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">.</span>lookAt <span class="token operator">=</span> <span class="token punctuation">[</span>target<span class="token punctuation">.</span>x<span class="token punctuation">,</span> target<span class="token punctuation">.</span>y<span class="token punctuation">,</span> target<span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>
        camera<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">[</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y<span class="token punctuation">,</span> position<span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="挂载模型" tabindex="-1"><a class="header-anchor" href="#挂载模型" aria-hidden="true">#</a> 挂载模型</h2><p>在定义好模型扩展后，需要把模型扩展对象挂载到<code>dt-sdk</code>中，这里可直接使用SDK提供的静态方法进行挂载。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">import</span> OorbitControls <span class="token keyword">from</span> <span class="token string">&#39;plugin/component/orbitControls&#39;</span>
<span class="token constant">SDK</span><span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>OorbitControls<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载后在场景渲染过程中，会自动检测当前模型实例是否有匹配的模型扩展，如果存在匹配的模型扩展，将自动加载并调度相应方法。</p>`,8);function m(b,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[s("参考："),n("a",r,[s("createComponent"),t(a)])])]),d,n("p",null,[s("模块扩展里支持添加模型在实例化过程中的所有"),n("a",k,[s("生命周期"),t(a)]),s("。")]),v])}const f=p(l,[["render",m],["__file","hmodel.html.vue"]]);export{f as default};
