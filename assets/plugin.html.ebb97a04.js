import{_ as i,r as o,o as l,c as u,a as n,b as s,d as a,w as p,e}from"./app.f18319b0.js";const r={},d=e(`<h1 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h1><h4 id="step1-获取自定义插件的方法" tabindex="-1"><a class="header-anchor" href="#step1-获取自定义插件的方法" aria-hidden="true">#</a> step1 - 获取自定义插件的方法</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> definePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@tslfe/dt-engine&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="step2-编写插件" tabindex="-1"><a class="header-anchor" href="#step2-编写插件" aria-hidden="true">#</a> step2 - 编写插件</h4><ul><li>通过 <code>definePlugin({})</code> 进行编写， <code>name</code> 为插件的名称， <code>setup()=&gt; return {}</code> 为对外暴露的函数，详见以下示例</li></ul><blockquote><p>customPlugin.ts</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">definePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;customPlugin&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件的名称,后续需要通过这个名称获取插件实例</span>
    <span class="token function">setup</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对外暴露函数</span>
        <span class="token keyword">const</span> <span class="token function-variable function">helloWorld</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">helloWorld, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name <span class="token operator">|</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> helloWorld <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),k={href:"/three/api/defineplugin.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<h4 id="step3-注册插件" tabindex="-1"><a class="header-anchor" href="#step3-注册插件" aria-hidden="true">#</a> step3 - 注册插件</h4><ul><li>在 <code>meta</code> 实例化后，需要引入插件并注册到 <code>meta</code>， 使用 <code>meta.useExtension()</code> 进行注册</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> customPlugin form <span class="token string">&#39;customPlugin.ts&#39;</span>
meta<span class="token punctuation">.</span><span class="token function">useExtension</span><span class="token punctuation">(</span><span class="token function">customPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),h=e(`<h4 id="step4-获取插件实例并调用" tabindex="-1"><a class="header-anchor" href="#step4-获取插件实例并调用" aria-hidden="true">#</a> step4 - 获取插件实例并调用</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 获取名为&quot;customPlugin&quot;的插件</span>
<span class="token keyword">const</span> plugin <span class="token operator">=</span> meta<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;customPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用</span>
plugin<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function v(g,b){const c=o("ExternalLinkIcon"),t=o("RouterLink");return l(),u("div",null,[d,n("blockquote",null,[n("p",null,[s("参考: "),n("a",k,[s("definePlugin"),a(c)])])]),m,n("blockquote",null,[n("p",null,[s("参考: "),a(t,{to:"/three/api/meta.html#useextension"},{default:p(()=>[s("meta.useExtension( )")]),_:1})])]),h,n("blockquote",null,[n("p",null,[s("参考: "),a(t,{to:"/three/api/meta.html#getextension"},{default:p(()=>[s("meta.getExtension( )")]),_:1})])])])}const _=i(r,[["render",v],["__file","plugin.html.vue"]]);export{_ as default};
