import{_ as c,r as a,o as i,c as l,a as n,b as s,d as t,w as u,e}from"./app.f18319b0.js";const r={},d=n("h1",{id:"消息推送",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消息推送","aria-hidden":"true"},"#"),s(" 消息推送")],-1),k=n("h3",{id:"机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#机制","aria-hidden":"true"},"#"),s(" 机制")],-1),v=n("code",null,"socket",-1),m={href:"https://github.com/zimv/websocket-heartbeat-js/blob/master/README-zh.md",target:"_blank",rel:"noopener noreferrer"},b=e(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>通过 <code>connect</code> 配置 <code>socket</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Tacos<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    appCode<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
    socket<span class="token operator">:</span> <span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token string">&quot;ws://192.168.125.193:8083&quot;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>sdk</code> 的 <code>createSocket</code> 方法配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> removeHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token operator">...</span>options<span class="token punctuation">,</span>
    url<span class="token operator">:</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">socketUrl</span><span class="token punctuation">(</span>spaceIds<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>appCode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h=e(`<h3 id="拦截" tabindex="-1"><a class="header-anchor" href="#拦截" aria-hidden="true">#</a> 拦截</h3><h4 id="全局拦截" tabindex="-1"><a class="header-anchor" href="#全局拦截" aria-hidden="true">#</a> 全局拦截</h4><p>通过 <code>connect</code> 初始化连接时，通过 <code>core</code> 对象注册全局拦截函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Tacos<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>core <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前上下文Context对象的socket请求拦截器对象</span>
    <span class="token keyword">const</span> interceptor <span class="token operator">=</span> core<span class="token punctuation">.</span><span class="token function">interceptor</span><span class="token punctuation">(</span><span class="token string">&quot;websocket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注入请求拦截回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注入请求响应回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 融合其他的socket拦截器实例</span>
    interceptor<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>socketInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部拦截" tabindex="-1"><a class="header-anchor" href="#局部拦截" aria-hidden="true">#</a> 局部拦截</h4><p>在 <code>sdk</code> 模块内注册 <code>socket</code> 请求拦截函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">defineSDK</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// 获取当前模块对象的socket请求拦截器</span>
    <span class="token keyword">const</span> interceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">interceptor</span><span class="token punctuation">(</span><span class="token string">&quot;websocket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 注入请求拦截回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 注入请求响应回调函数</span>
    interceptor<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span>socketConfig<span class="token punctuation">,</span> <span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">// 响应body</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function f(g,_){const p=a("ExternalLinkIcon"),o=a("RouterLink");return i(),l("div",null,[d,k,n("p",null,[s("底层 "),v,s(" 通信基于"),n("a",m,[s("心跳检测"),t(p)]),s(" 实现消息实时推送与监听。")]),b,n("blockquote",null,[n("p",null,[s("参考: "),t(o,{to:"/digital/help/declare.html#socketconfig"},{default:u(()=>[s("SocketConfig")]),_:1})])]),h])}const y=c(r,[["render",f],["__file","socket.html.vue"]]);export{y as default};
