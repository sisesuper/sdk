import{_ as e,r as t,o as p,c,a as n,b as s,d as o,e as l}from"./app.f18319b0.js";const i={},d=l(`<h1 id="扩展渲染器" tabindex="-1"><a class="header-anchor" href="#扩展渲染器" aria-hidden="true">#</a> 扩展渲染器</h1><p>渲染器承载着整个三维场景渲染的基础，在三维场景渲染的过程中，各个元素都依赖于各自的渲染器进行实例和渲染。 在<code>dt-sdk</code>设计的初期就已经把渲染器，设计为了一个个可插拔的插件。在<code>dt-sdk</code>内部已经内置了一批通用的渲染器， 例如：<code>SceneRender</code> <code>HemisphereLightRender</code> <code>GltfLoaderRender</code>等。在进行项目开发过程中，如果发现缺少所需类型的渲染器做支撑，可参照以下方法进行渲染器扩展。</p><h2 id="定义渲染器" tabindex="-1"><a class="header-anchor" href="#定义渲染器" aria-hidden="true">#</a> 定义渲染器</h2><p>自定义的渲染器需要继承 <code>BaseRender</code> 父类，并实现其中的 <code>create</code> 方法， <code>create</code> 方法需要返回具体的模型实例。这里以 <code>Scene</code> 为例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>BaseRender<span class="token punctuation">,</span> DTRender<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Scene <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SceneRender</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRender<span class="token operator">&lt;</span>Scene<span class="token punctuation">,</span> DTRender<span class="token punctuation">.</span>SceneOptions<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义的渲染器中，可以直接使用模型实例化过程中的所有生命周期。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>BaseRender<span class="token punctuation">,</span> DTRender<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Scene <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SceneRender</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRender<span class="token operator">&lt;</span>Scene<span class="token punctuation">,</span> DTRender<span class="token punctuation">.</span>SceneOptions<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在自定义的渲染其中如果使用了模型生命周期，你需要优先调用并执行父类的生命周期方法。</p></blockquote><h2 id="挂载渲染器" tabindex="-1"><a class="header-anchor" href="#挂载渲染器" aria-hidden="true">#</a> 挂载渲染器</h2><p>在定义好渲染器后，需要将渲染器提前挂载到 <code>dt-sdk</code> 的渲染器中，这里可直接使用SDK上的静态方法进行挂载。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token constant">SDK</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>DTModel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dt-sdk&#39;</span>

<span class="token constant">SDK</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span>DTModel<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Scene<span class="token punctuation">,</span> SceneRender<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),r={href:"/api/#sdk-renderer",target:"_blank",rel:"noopener noreferrer"},u=n("h2",{id:"使用渲染器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用渲染器","aria-hidden":"true"},"#"),s(" 使用渲染器")],-1),k=n("p",null,"在挂载好自定义渲染后，我们就可以在场景描述文件添加自定义的模型类型。添加了自定义的模型类型后，场景在渲染过程中将自动应用于类型匹配的渲染器，并调度相应的方法完成模型渲染。",-1);function v(m,b){const a=t("ExternalLinkIcon");return p(),c("div",null,[d,n("ul",null,[n("li",null,[s("参考："),n("a",r,[s("renderer"),o(a)])])]),u,k])}const y=e(i,[["render",v],["__file","render.html.vue"]]);export{y as default};
